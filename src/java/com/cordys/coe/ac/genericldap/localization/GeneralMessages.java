/*
 * Copyright 2007 Cordys R&D B.V. 
 *
 *   This file is part of the Cordys Generic LDAP Connector. 
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package com.cordys.coe.ac.genericldap.localization;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.wizards.localization.CoEMessageGenerator.
 */
public class GeneralMessages
{
	/**
	 * Holds the definition of the message set.
	 */
	public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.cordys.coe.ac.genericldap.Messages");

	/**
	 * Holds the definition of the message with ID DELETE_FAILED.
	 * Message text:
	 * Delete failed
	 */
	public static final Message DELETE_FAILED = MESSAGE_SET.getMessage("DELETE_FAILED");
	/**
	 * Holds the definition of the message with ID ERROR_DISCONNECTING_CONNECTION.
	 * Message text:
	 * Error disconnecting connection
	 */
	public static final Message ERROR_DISCONNECTING_CONNECTION = MESSAGE_SET.getMessage("ERROR_DISCONNECTING_CONNECTION");
	/**
	 * Holds the definition of the message with ID ERROR_LOST_A_CONNECTION_BECAUSE_IT_COULD_NOT_BE_RECREATED.
	 * Message text:
	 * Lost a connection, because it could not be recreated.
	 */
	public static final Message ERROR_LOST_A_CONNECTION_BECAUSE_IT_COULD_NOT_BE_RECREATED = MESSAGE_SET.getMessage("ERROR_LOST_A_CONNECTION_BECAUSE_IT_COULD_NOT_BE_RECREATED");
	/**
	 * Holds the definition of the message with ID ERROR_PREPARING_REQUESTN0.
	 * Message text:
	 * Error preparing request:\n{0}
	 */
	public static final Message ERROR_PREPARING_REQUESTN0 = MESSAGE_SET.getMessage("ERROR_PREPARING_REQUESTN0");
	/**
	 * Holds the definition of the message with ID OBJECT_ALREADY_EXISTS.
	 * Message text:
	 * Object already exists
	 */
	public static final Message OBJECT_ALREADY_EXISTS = MESSAGE_SET.getMessage("OBJECT_ALREADY_EXISTS");
	/**
	 * Holds the definition of the message with ID connectorManagementDescription.
	 * Message text:
	 * This component is used to access an LDAP server.
	 */
	public static final Message CONNECTOR_MANAGEMENT_DESCRIPTION = MESSAGE_SET.getMessage("connectorManagementDescription");
	/**
	 * Holds the definition of the message with ID coelibVersionMismatch.
	 * Message text:
	 * Coelib version mismatch.
	 */
	public static final Message COELIB_VERSION_MISMATCH = MESSAGE_SET.getMessage("coelibVersionMismatch");
	/**
	 * Holds the definition of the message with ID connectorStarting.
	 * Message text:
	 * Starting GenLDAPConnector Connector.
	 * System Information:
	 * {0}
	 */
	public static final Message CONNECTOR_STARTING = MESSAGE_SET.getMessage("connectorStarting");
	/**
	 * Holds the definition of the message with ID connectorStarted.
	 * Message text:
	 * GenLDAPConnector connector started.
	 */
	public static final Message CONNECTOR_STARTED = MESSAGE_SET.getMessage("connectorStarted");
	/**
	 * Holds the definition of the message with ID connectorStartException.
	 * Message text:
	 * An error occurred while starting the GenLDAPConnector connector.
	 */
	public static final Message CONNECTOR_START_EXCEPTION = MESSAGE_SET.getMessage("connectorStartException");
	/**
	 * Holds the definition of the message with ID connectorStopped.
	 * Message text:
	 * GenLDAPConnector connector stopped.
	 */
	public static final Message CONNECTOR_STOPPED = MESSAGE_SET.getMessage("connectorStopped");
	/**
	 * Holds the definition of the message with ID connectorReset.
	 * Message text:
	 * Resetting GenLDAPConnector connector
	 */
	public static final Message CONNECTOR_RESET = MESSAGE_SET.getMessage("connectorReset");
	/**
	 * Holds the definition of the message with ID transactionAbort.
	 * Message text:
	 * Aborted the transaction.
	 */
	public static final Message TRANSACTION_ABORT = MESSAGE_SET.getMessage("transactionAbort");
	/**
	 * Holds the definition of the message with ID transactionCommit.
	 * Message text:
	 * Committed the transaction.
	 */
	public static final Message TRANSACTION_COMMIT = MESSAGE_SET.getMessage("transactionCommit");
	/**
	 * Holds the definition of the message with ID transactionError.
	 * Message text:
	 * An error occurred while processing the SOAP request: {0}
	 */
	public static final Message TRANSACTION_ERROR = MESSAGE_SET.getMessage("transactionError");
	/**
	 * Holds the definition of the message with ID CONFIG_SECURITY_PROVIDER_NOT_FOUND.
	 * Message text:
	 * Could not find the security provider {0}
	 */
	public static final Message CONFIG_SECURITY_PROVIDER_NOT_FOUND = MESSAGE_SET.getMessage("CONFIG_SECURITY_PROVIDER_NOT_FOUND");
	/**
	 * Holds the definition of the message with ID UPDATE_ROLLBACK_FAILED_FOR_TUPLE.
	 * Message text:
	 * Rollback failed for tuple: {0}
	 */
	public static final Message UPDATE_ROLLBACK_FAILED_FOR_TUPLE = MESSAGE_SET.getMessage("UPDATE_ROLLBACK_FAILED_FOR_TUPLE");
	/**
	 * Holds the definition of the message with ID UPDATE_COMMIT_LEVEL_FAILED.
	 * Message text:
	 * Commit level failed for {0}
	 */
	public static final Message UPDATE_COMMIT_LEVEL_FAILED = MESSAGE_SET.getMessage("UPDATE_COMMIT_LEVEL_FAILED");
	/**
	 * Holds the definition of the message with ID UPDATE_ROLLBACK_FAILED_FOR_DN.
	 * Message text:
	 * Rolling back failed for {0}
	 */
	public static final Message UPDATE_ROLLBACK_FAILED_FOR_DN = MESSAGE_SET.getMessage("UPDATE_ROLLBACK_FAILED_FOR_DN");

}