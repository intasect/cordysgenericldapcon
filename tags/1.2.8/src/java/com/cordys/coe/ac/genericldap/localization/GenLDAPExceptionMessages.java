/*
 * Copyright 2007 Cordys R&D B.V. 
 *
 *   This file is part of the Cordys Generic LDAP Connector. 
 *
 *   Licensed under the Apache License, Version 2.0 (the "License");
 *   you may not use this file except in compliance with the License.
 *   You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 *   Unless required by applicable law or agreed to in writing, software
 *   distributed under the License is distributed on an "AS IS" BASIS,
 *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *   See the License for the specific language governing permissions and
 *   limitations under the License.
 */
package com.cordys.coe.ac.genericldap.localization;

import com.eibus.localization.message.Message;
import com.eibus.localization.message.MessageSet;

/**
 * This code is generated by running com.cordys.coe.cep.wizards.localization.CoEMessageGenerator.
 */
public class GenLDAPExceptionMessages
{
	/**
	 * Holds the definition of the message set.
	 */
	public static final MessageSet MESSAGE_SET = MessageSet.getMessageSet("com.cordys.coe.ac.genericldap.GenLDAPException");

	/**
	 * Holds the definition of the message with ID ERROR_EXECUTING_SEARCH_REQUEST.
	 * Message text:
	 * Error executing search request
	 */
	public static final Message ERROR_EXECUTING_SEARCH_REQUEST = MESSAGE_SET.getMessage("ERROR_EXECUTING_SEARCH_REQUEST");
	/**
	 * Holds the definition of the message with ID ERROR_UPDATING_LDAP.
	 * Message text:
	 * Error updating LDAP
	 */
	public static final Message ERROR_UPDATING_LDAP = MESSAGE_SET.getMessage("ERROR_UPDATING_LDAP");
	/**
	 * Holds the definition of the message with ID GLE_0_HAS_BEEN_DELETED.
	 * Message text:
	 * '{0}' has been deleted.
	 */
	public static final Message GLE_0_HAS_BEEN_DELETED = MESSAGE_SET.getMessage("GLE_0_HAS_BEEN_DELETED");
	/**
	 * Holds the definition of the message with ID GLE_0_HAS_BEEN_MODIFIED_ON_THE_LDAP_SERVER.
	 * Message text:
	 * '{0}' has been modified on the LDAP server.
	 */
	public static final Message GLE_0_HAS_BEEN_MODIFIED_ON_THE_LDAP_SERVER = MESSAGE_SET.getMessage("GLE_0_HAS_BEEN_MODIFIED_ON_THE_LDAP_SERVER");
	/**
	 * Holds the definition of the message with ID GLE_0_OF_1_HAS_BEEN_DELETED_ON_THE_LDAP_SERVER.
	 * Message text:
	 * '{0}' of '{1}' has been deleted on the LDAP server.
	 */
	public static final Message GLE_0_OF_1_HAS_BEEN_DELETED_ON_THE_LDAP_SERVER = MESSAGE_SET.getMessage("GLE_0_OF_1_HAS_BEEN_DELETED_ON_THE_LDAP_SERVER");
	/**
	 * Holds the definition of the message with ID GLE_0_OF_1_HAS_BEEN_MODIFIED_ON_THE_LDAP_SERVER.
	 * Message text:
	 * '{0}' of '{1}' has been modified on the LDAP server.
	 */
	public static final Message GLE_0_OF_1_HAS_BEEN_MODIFIED_ON_THE_LDAP_SERVER = MESSAGE_SET.getMessage("GLE_0_OF_1_HAS_BEEN_MODIFIED_ON_THE_LDAP_SERVER");
	/**
	 * Holds the definition of the message with ID GLE_ACTION_NOT_FOUND_IN_THE_IMPLEMENTATION.
	 * Message text:
	 * Action not found in the implementation
	 */
	public static final Message GLE_ACTION_NOT_FOUND_IN_THE_IMPLEMENTATION = MESSAGE_SET.getMessage("GLE_ACTION_NOT_FOUND_IN_THE_IMPLEMENTATION");
	/**
	 * Holds the definition of the message with ID GLE_CANT_FIND_THE_PARAMETER_DEFINITION_FOR_PARAMETER_WITH_NAME.
	 * Message text:
	 * Can't find the parameter definition for parameter with name {0}
	 */
	public static final Message GLE_CANT_FIND_THE_PARAMETER_DEFINITION_FOR_PARAMETER_WITH_NAME = MESSAGE_SET.getMessage("GLE_CANT_FIND_THE_PARAMETER_DEFINITION_FOR_PARAMETER_WITH_NAME");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_COMMITTING_THE_TRANSACTION.
	 * Message text:
	 * Error committing the transaction
	 */
	public static final Message GLE_ERROR_COMMITTING_THE_TRANSACTION = MESSAGE_SET.getMessage("GLE_ERROR_COMMITTING_THE_TRANSACTION");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_CREATING_IMPLEMENTATION_CLASS.
	 * Message text:
	 * Error creating implementation class
	 */
	public static final Message GLE_ERROR_CREATING_IMPLEMENTATION_CLASS = MESSAGE_SET.getMessage("GLE_ERROR_CREATING_IMPLEMENTATION_CLASS");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_TRANSFORMING_THE_RESULTS_TO_XML.
	 * Message text:
	 * Error transforming the results to XML
	 */
	public static final Message GLE_ERROR_TRANSFORMING_THE_RESULTS_TO_XML = MESSAGE_SET.getMessage("GLE_ERROR_TRANSFORMING_THE_RESULTS_TO_XML");
	/**
	 * Holds the definition of the message with ID GLE_INVALID_IMPLEMENTATION_XML_CANNOT_FIND_ROOT_TAG.
	 * Message text:
	 * Invalid implementation XML: Cannot find root tag
	 */
	public static final Message GLE_INVALID_IMPLEMENTATION_XML_CANNOT_FIND_ROOT_TAG = MESSAGE_SET.getMessage("GLE_INVALID_IMPLEMENTATION_XML_CANNOT_FIND_ROOT_TAG");
	/**
	 * Holds the definition of the message with ID GLE_INVALID_METHOD_IMPLEMENTATION.
	 * Message text:
	 * Invalid method implementation
	 */
	public static final Message GLE_INVALID_METHOD_IMPLEMENTATION = MESSAGE_SET.getMessage("GLE_INVALID_METHOD_IMPLEMENTATION");
	/**
	 * Holds the definition of the message with ID GLE_MISSING_ATTRIBUTE_NAME.
	 * Message text:
	 * Missing attribute name
	 */
	public static final Message GLE_MISSING_ATTRIBUTE_NAME = MESSAGE_SET.getMessage("GLE_MISSING_ATTRIBUTE_NAME");
	/**
	 * Holds the definition of the message with ID GLE_MISSING_MANDATORY_PARAMETER.
	 * Message text:
	 * Missing mandatory parameter {0}. The xpath ({1}) did not return a match.
	 */
	public static final Message GLE_MISSING_MANDATORY_PARAMETER = MESSAGE_SET.getMessage("GLE_MISSING_MANDATORY_PARAMETER");
	/**
	 * Holds the definition of the message with ID GLE_MISSING_REQUEST_INFORMATION_0.
	 * Message text:
	 * Missing request information: {0}
	 */
	public static final Message GLE_MISSING_REQUEST_INFORMATION_0 = MESSAGE_SET.getMessage("GLE_MISSING_REQUEST_INFORMATION_0");
	/**
	 * Holds the definition of the message with ID GLE_NO_ACTIVE_CONNECTION_TO_THE_LDAP.
	 * Message text:
	 * No active connection to the LDAP.
	 */
	public static final Message GLE_NO_ACTIVE_CONNECTION_TO_THE_LDAP = MESSAGE_SET.getMessage("GLE_NO_ACTIVE_CONNECTION_TO_THE_LDAP");
	/**
	 * Holds the definition of the message with ID GLE_OBJECT_IS_CHANGED_BY_OTHER_USER_IN_LDAP.
	 * Message text:
	 * Object is changed by other user in LDAP
	 */
	public static final Message GLE_OBJECT_IS_CHANGED_BY_OTHER_USER_IN_LDAP = MESSAGE_SET.getMessage("GLE_OBJECT_IS_CHANGED_BY_OTHER_USER_IN_LDAP");
	/**
	 * Holds the definition of the message with ID GLE_OPERATION_0_IS_NOT_IMPLEMENTED.
	 * Message text:
	 * Operation '{0}' is not implemented
	 */
	public static final Message GLE_OPERATION_0_IS_NOT_IMPLEMENTED = MESSAGE_SET.getMessage("GLE_OPERATION_0_IS_NOT_IMPLEMENTED");
	/**
	 * Holds the definition of the message with ID GLE_PARAMETER_0_MUST_HAVE_AN_XPATH_DEFINED.
	 * Message text:
	 * Parameter {0} must have an XPath defined
	 */
	public static final Message GLE_PARAMETER_0_MUST_HAVE_AN_XPATH_DEFINED = MESSAGE_SET.getMessage("GLE_PARAMETER_0_MUST_HAVE_AN_XPATH_DEFINED");
	/**
	 * Holds the definition of the message with ID GLE_PARAMETER_0_MUST_HAVE_EITHER_A_FIXEDVALUE_OR_AN_XPATH_BUT_NOT_BOTH.
	 * Message text:
	 * Parameter {0} must have either a fixedValue OR an xpath, but not both.
	 */
	public static final Message GLE_PARAMETER_0_MUST_HAVE_EITHER_A_FIXEDVALUE_OR_AN_XPATH_BUT_NOT_BOTH = MESSAGE_SET.getMessage("GLE_PARAMETER_0_MUST_HAVE_EITHER_A_FIXEDVALUE_OR_AN_XPATH_BUT_NOT_BOTH");
	/**
	 * Holds the definition of the message with ID GLE_THE_EXCLUDE_TAG_CANNOT_HAVE_AN_EMPTY_XPATH_ATTRIBUTE.
	 * Message text:
	 * The exclude tag cannot have an empty xpath attribute.
	 */
	public static final Message GLE_THE_EXCLUDE_TAG_CANNOT_HAVE_AN_EMPTY_XPATH_ATTRIBUTE = MESSAGE_SET.getMessage("GLE_THE_EXCLUDE_TAG_CANNOT_HAVE_AN_EMPTY_XPATH_ATTRIBUTE");
	/**
	 * Holds the definition of the message with ID GLE_THE_INCLUDE_TAG_CANNOT_HAVE_AN_EMPTY_XPATH_ATTRIBUTE.
	 * Message text:
	 * The include tag cannot have an empty xpath attribute
	 */
	public static final Message GLE_THE_INCLUDE_TAG_CANNOT_HAVE_AN_EMPTY_XPATH_ATTRIBUTE = MESSAGE_SET.getMessage("GLE_THE_INCLUDE_TAG_CANNOT_HAVE_AN_EMPTY_XPATH_ATTRIBUTE");
	/**
	 * Holds the definition of the message with ID GLE_THE_PARAMETER_XML_IS_NOT_DEFINED.
	 * Message text:
	 * The parameter XML is not defined.
	 */
	public static final Message GLE_THE_PARAMETER_XML_IS_NOT_DEFINED = MESSAGE_SET.getMessage("GLE_THE_PARAMETER_XML_IS_NOT_DEFINED");
	/**
	 * Holds the definition of the message with ID GLE_TUPLE_DID_NOT_CONTAIN_A_OLD_OR_A_NEW_TAG.
	 * Message text:
	 * Tuple did not contain a old or a new tag.
	 */
	public static final Message GLE_TUPLE_DID_NOT_CONTAIN_A_OLD_OR_A_NEW_TAG = MESSAGE_SET.getMessage("GLE_TUPLE_DID_NOT_CONTAIN_A_OLD_OR_A_NEW_TAG");
	/**
	 * Holds the definition of the message with ID THE_DN_IS_INVALID.
	 * Message text:
	 * The DN is invalid. Either It contains special characters '\\ / : * ? ; , \" ' & < > | # +' or invalid format.
	 */
	public static final Message THE_DN_IS_INVALID = MESSAGE_SET.getMessage("THE_DN_IS_INVALID");
	/**
	 * Holds the definition of the message with ID GLE_0_AND_1_DO_NOT_MATCH.
	 * Message text:
	 * '{0}' and '{1}' do not match.
	 */
	public static final Message GLE_0_AND_1_DO_NOT_MATCH = MESSAGE_SET.getMessage("GLE_0_AND_1_DO_NOT_MATCH");
	/**
	 * Holds the definition of the message with ID GLE_ALREADY_EXISTS_IN_LDAP.
	 * Message text:
	 * '{0}' already exists in LDAP.
	 */
	public static final Message GLE_ALREADY_EXISTS_IN_LDAP = MESSAGE_SET.getMessage("GLE_ALREADY_EXISTS_IN_LDAP");
	/**
	 * Holds the definition of the message with ID GLE_DN_AND_CN_DO_NOT_MATCH.
	 * Message text:
	 * DN and CN do not match.
	 */
	public static final Message GLE_DN_AND_CN_DO_NOT_MATCH = MESSAGE_SET.getMessage("GLE_DN_AND_CN_DO_NOT_MATCH");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_CREATING_OR_UPDATING_CORDYS_USERS.
	 * Message text:
	 * Error creating or updating Cordys users.
	 */
	public static final Message GLE_ERROR_CREATING_OR_UPDATING_CORDYS_USERS = MESSAGE_SET.getMessage("GLE_ERROR_CREATING_OR_UPDATING_CORDYS_USERS");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_DURING_UPDATE_BUT_ROLLBACK_FAILED_REASON_.
	 * Message text:
	 * Error during update. But rollback failed! Reason: 
	 */
	public static final Message GLE_ERROR_DURING_UPDATE_BUT_ROLLBACK_FAILED_REASON_ = MESSAGE_SET.getMessage("GLE_ERROR_DURING_UPDATE_BUT_ROLLBACK_FAILED_REASON_");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_EXECUTING_SEARCH_WITH_CRITERIAN0.
	 * Message text:
	 * Error executing search with criteria:
	 * {0}
	 */
	public static final Message GLE_ERROR_EXECUTING_SEARCH_WITH_CRITERIAN0 = MESSAGE_SET.getMessage("GLE_ERROR_EXECUTING_SEARCH_WITH_CRITERIAN0");
	/**
	 * Holds the definition of the message with ID GLE_FAILED_TO_UPDATECORDYSUSERS.
	 * Message text:
	 * Failed to UpdateCordysUsers
	 */
	public static final Message GLE_FAILED_TO_UPDATECORDYSUSERS = MESSAGE_SET.getMessage("GLE_FAILED_TO_UPDATECORDYSUSERS");
	/**
	 * Holds the definition of the message with ID GLE_METHOD_0_DOES_NOT_HAVE_A_PROPER_SEARCHROOT_FORMAT_1.
	 * Message text:
	 * Method '{0}' does not have a proper searchroot format: {1}
	 */
	public static final Message GLE_METHOD_0_DOES_NOT_HAVE_A_PROPER_SEARCHROOT_FORMAT_1 = MESSAGE_SET.getMessage("GLE_METHOD_0_DOES_NOT_HAVE_A_PROPER_SEARCHROOT_FORMAT_1");
	/**
	 * Holds the definition of the message with ID GLE_THE_USER_COULD_NOT_BE_FOUND_IN_THE_REQUEST.
	 * Message text:
	 * The user could not be found in the request
	 */
	public static final Message GLE_THE_USER_COULD_NOT_BE_FOUND_IN_THE_REQUEST = MESSAGE_SET.getMessage("GLE_THE_USER_COULD_NOT_BE_FOUND_IN_THE_REQUEST");
	/**
	 * Holds the definition of the message with ID GLE_COULD_NOT_CREATE_THE_DESIDERED_SECURITY_PROVIDER.
	 * Message text:
	 * Could not create the desidered security provider.
	 */
	public static final Message GLE_COULD_NOT_CREATE_THE_DESIDERED_SECURITY_PROVIDER = MESSAGE_SET.getMessage("GLE_COULD_NOT_CREATE_THE_DESIDERED_SECURITY_PROVIDER");
	/**
	 * Holds the definition of the message with ID GLE_COULD_NOT_OBTAIN_FREE_LDAP_CONNECTION.
	 * Message text:
	 * Could not obtain free LDAP connection
	 */
	public static final Message GLE_COULD_NOT_OBTAIN_FREE_LDAP_CONNECTION = MESSAGE_SET.getMessage("GLE_COULD_NOT_OBTAIN_FREE_LDAP_CONNECTION");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_CREATING_CONNECTION_NUMBER_0_FOR_SERVER_12.
	 * Message text:
	 * Error creating connection number {0} for server {1}:{2}
	 */
	public static final Message GLE_ERROR_CREATING_CONNECTION_NUMBER_0_FOR_SERVER_12 = MESSAGE_SET.getMessage("GLE_ERROR_CREATING_CONNECTION_NUMBER_0_FOR_SERVER_12");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_CREATING_CONNECTION_TO_01.
	 * Message text:
	 * Error creating connection to {0}:{1}
	 */
	public static final Message GLE_ERROR_CREATING_CONNECTION_TO_01 = MESSAGE_SET.getMessage("GLE_ERROR_CREATING_CONNECTION_TO_01");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_EXECUTING_REQUEST_0.
	 * Message text:
	 * Error executing request: {0}
	 */
	public static final Message GLE_ERROR_EXECUTING_REQUEST_0 = MESSAGE_SET.getMessage("GLE_ERROR_EXECUTING_REQUEST_0");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_READING_LDAP_ENTRY_WITH_DN_0.
	 * Message text:
	 * Error reading LDAP entry with DN {0}
	 */
	public static final Message GLE_ERROR_READING_LDAP_ENTRY_WITH_DN_0 = MESSAGE_SET.getMessage("GLE_ERROR_READING_LDAP_ENTRY_WITH_DN_0");
	/**
	 * Holds the definition of the message with ID GLE_ERROR_STARTING_GENERIC_LDAP_CONNECTOR.
	 * Message text:
	 * Error starting Generic LDAP connector
	 */
	public static final Message GLE_ERROR_STARTING_GENERIC_LDAP_CONNECTOR = MESSAGE_SET.getMessage("GLE_ERROR_STARTING_GENERIC_LDAP_CONNECTOR");
	/**
	 * Holds the definition of the message with ID GLE_THE_CLASS_0_DOES_NOT_EXTEND_THE_JAVASECURITYPROVIDER_CLASS.
	 * Message text:
	 * The class {0} does not extend the java.security.Provider class.
	 */
	public static final Message GLE_THE_CLASS_0_DOES_NOT_EXTEND_THE_JAVASECURITYPROVIDER_CLASS = MESSAGE_SET.getMessage("GLE_THE_CLASS_0_DOES_NOT_EXTEND_THE_JAVASECURITYPROVIDER_CLASS");
	/**
	 * Holds the definition of the message with ID GLE_EXCEPTION_WHILE_CREATING_THE_CONFIGURATIONOBJECT.
	 * Message text:
	 * Exception while creating the configuration-object.
	 */
	public static final Message GLE_EXCEPTION_WHILE_CREATING_THE_CONFIGURATIONOBJECT = MESSAGE_SET.getMessage("GLE_EXCEPTION_WHILE_CREATING_THE_CONFIGURATIONOBJECT");
	/**
	 * Holds the definition of the message with ID GLE_ROOTTAG_OF_THE_CONFIGURATION_SHOULD_BE_CONFIGURATION.
	 * Message text:
	 * Root-tag of the configuration should be <configuration>
	 */
	public static final Message GLE_ROOTTAG_OF_THE_CONFIGURATION_SHOULD_BE_CONFIGURATION = MESSAGE_SET.getMessage("GLE_ROOTTAG_OF_THE_CONFIGURATION_SHOULD_BE_CONFIGURATION");
	/**
	 * Holds the definition of the message with ID GLE_CONFIGURATION_NOT_FOUND.
	 * Message text:
	 * Configuration not found
	 */
	public static final Message GLE_CONFIGURATION_NOT_FOUND = MESSAGE_SET.getMessage("GLE_CONFIGURATION_NOT_FOUND");

}